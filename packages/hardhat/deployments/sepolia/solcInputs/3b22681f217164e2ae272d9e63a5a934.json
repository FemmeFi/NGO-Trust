{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/NGORegistry.sol": {
      "content": "// packages/hardhat/contracts/NGORegistry.sol\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract NGORegistry is Ownable {\r\n    struct NGO {\r\n        string name;\r\n        string description;\r\n        string website;\r\n        string location;\r\n        string president;\r\n        string ensName;\r\n        string avatar;\r\n        address walletAddress;\r\n        bool isVerified;\r\n        uint256 registrationDate;\r\n    }\r\n    \r\n    mapping(address => NGO) public ngoByAddress;\r\n    mapping(string => address) public addressByENS;\r\n    address[] public registeredNGOs;\r\n    \r\n    event NGORegistered(address indexed ngoAddress, string name, string ensName);\r\n    event NGOUpdated(address indexed ngoAddress, string field);\r\n    event NGODeleted(address indexed ngoAddress);\r\n    \r\n    constructor() Ownable(msg.sender) {}\r\n    \r\n    function registerNGO(\r\n        string memory _name,\r\n        string memory _description,\r\n        string memory _website,\r\n        string memory _location,\r\n        string memory _president,\r\n        string memory _ensName,\r\n        string memory _avatar\r\n    ) external {\r\n        require(ngoByAddress[msg.sender].walletAddress == address(0), \"NGO already registered\");\r\n        \r\n        if (bytes(_ensName).length > 0) {\r\n            require(addressByENS[_ensName] == address(0), \"ENS name already taken\");\r\n            addressByENS[_ensName] = msg.sender;\r\n        }\r\n        \r\n        NGO memory newNGO = NGO({\r\n            name: _name,\r\n            description: _description,\r\n            website: _website,\r\n            location: _location,\r\n            president: _president,\r\n            ensName: _ensName,\r\n            avatar: _avatar,\r\n            walletAddress: msg.sender,\r\n            isVerified: false,\r\n            registrationDate: block.timestamp\r\n        });\r\n        \r\n        ngoByAddress[msg.sender] = newNGO;\r\n        registeredNGOs.push(msg.sender);\r\n        \r\n        emit NGORegistered(msg.sender, _name, _ensName);\r\n    }\r\n    \r\n    function updateNGO(\r\n        string memory _name,\r\n        string memory _description,\r\n        string memory _website,\r\n        string memory _location,\r\n        string memory _president,\r\n        string memory _avatar\r\n    ) external {\r\n        require(ngoByAddress[msg.sender].walletAddress != address(0), \"NGO not registered\");\r\n        \r\n        ngoByAddress[msg.sender].name = _name;\r\n        ngoByAddress[msg.sender].description = _description;\r\n        ngoByAddress[msg.sender].website = _website;\r\n        ngoByAddress[msg.sender].location = _location;\r\n        ngoByAddress[msg.sender].president = _president;\r\n        ngoByAddress[msg.sender].avatar = _avatar;\r\n        \r\n        emit NGOUpdated(msg.sender, \"NGO details updated\");\r\n    }\r\n    \r\n    function deleteNGO() external {\r\n        require(ngoByAddress[msg.sender].walletAddress != address(0), \"NGO not registered\");\r\n        \r\n        // Remove from ENS mapping\r\n        if (bytes(ngoByAddress[msg.sender].ensName).length > 0) {\r\n            delete addressByENS[ngoByAddress[msg.sender].ensName];\r\n        }\r\n        \r\n        // Remove from arrays and mappings\r\n        delete ngoByAddress[msg.sender];\r\n        \r\n        // Remove from registered NGOs array\r\n        for (uint i = 0; i < registeredNGOs.length; i++) {\r\n            if (registeredNGOs[i] == msg.sender) {\r\n                registeredNGOs[i] = registeredNGOs[registeredNGOs.length - 1];\r\n                registeredNGOs.pop();\r\n                break;\r\n            }\r\n        }\r\n        \r\n        emit NGODeleted(msg.sender);\r\n    }\r\n    \r\n    function getNGOByAddress(address _ngoAddress) external view returns (NGO memory) {\r\n        return ngoByAddress[_ngoAddress];\r\n    }\r\n    \r\n    function getNGOByENS(string memory _ensName) external view returns (NGO memory) {\r\n        address ngoAddress = addressByENS[_ensName];\r\n        require(ngoAddress != address(0), \"ENS name not registered\");\r\n        return ngoByAddress[ngoAddress];\r\n    }\r\n    \r\n    function getAllNGOs() external view returns (NGO[] memory) {\r\n        NGO[] memory ngos = new NGO[](registeredNGOs.length);\r\n        for (uint256 i = 0; i < registeredNGOs.length; i++) {\r\n            ngos[i] = ngoByAddress[registeredNGOs[i]];\r\n        }\r\n        return ngos;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
